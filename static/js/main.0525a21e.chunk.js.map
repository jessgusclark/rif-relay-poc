{"version":3,"sources":["components/ProviderConnect.tsx","components/EoaAccount.tsx","lib/SmartWalletFactory.ts","components/SmartWallet.tsx","components/RelayHub.tsx","components/RelayTransaction.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["rLogin","RLogin","cacheProvider","supportedChains","ProviderConnect","setProvider","onClick","connect","then","response","Addresses","provider","useState","balance","setBalance","selectedAddress","request","method","params","parseInt","createSmartWalletFactoryContract","address","Contract","SmartWalletFactoryABI","SmartWalletFactory","smartAddress","smartWalletFactoryContract","getSmartWalletAddress","Promise","resolve","isDeployed","signer","getCode","code","deploy","selfCreateUserSmartWallet","constants","AddressZero","Zero","this","smartWalletFactoryContractAddress","getAddress","getSmartWalletParams","smartWalletAddress","smartWalletFactoryAddress","toLowerCase","SmartWallet","ethersProvider","smartWallet","setSmartWallet","setIsDeployed","tokenBalance","setTokenBalance","useEffect","create","getSigner","factory","checkIfDeployed","wallet","toString","deployResult","console","log","disabled","ethers","erc20Abi","balanceOf","relayHubAddress","RelayHub","setHubDetails","error","setError","undefined","axios","get","resp","data","catch","err","RelayTransaction","hubDetails","style","width","textAlign","JSON","stringify","App","setEthersProvider","rLoginResponse","setRloginResponse","relayHubInfo","setRelayHubInfo","className","rLoginresponse","providers","Web3Provider","EoaAccount","details","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0525a21e.chunk.js","sourcesContent":["import React from 'react'\nimport RLogin from '@rsksmart/rlogin'\n\ninterface Interface {\n  setProvider: (details: any) => void\n}\n\nconst rLogin = new RLogin({ cacheProvider: false, supportedChains: [33] })\n\nconst ProviderConnect: React.FC<Interface> = ({ setProvider }) => {\n  const handleLogin = () => {\n    rLogin.connect()\n      .then(response => setProvider(response))\n  }\n\n  return (\n    <div>\n      <h2>Connect to your Provider:</h2>\n      <button onClick={handleLogin}>Connect!</button>\n      <hr />\n    </div>\n  )\n}\n\nexport default ProviderConnect\n","import React, { useState } from 'react'\n\ninterface Interface {\n  provider: any\n}\n\nconst Addresses: React.FC<Interface> = ({ provider }) => {\n  const [balance, setBalance] = useState<number | undefined>()\n\n  const getBalanced = () => provider\n    .request({ method: 'eth_getBalance', params: [provider.selectedAddress] })\n    .then((balance: any) => setBalance(parseInt(balance)))\n\n  return (\n    <div>\n      <h2>EOA Account:</h2>\n      <p><strong>Address</strong>: {provider.selectedAddress}</p>\n      <p>\n        <strong>Balance:</strong>\n        {balance}\n        <button onClick={getBalanced}>refresh</button>\n      </p>\n      <hr />\n    </div>\n  )\n}\n\nexport default Addresses\n","import { Contract, constants, ContractTransaction, Signer } from 'ethers'\nimport SmartWalletFactoryABI from '../abi/SmartWalletFactoryABI.json'\n\ninterface ISmartWalletFactory {\n  getSmartWalletAddress(): Promise<string>\n\n  isDeployed(): Promise<boolean>\n  deploy(): Promise<ContractTransaction>\n}\n\nconst createSmartWalletFactoryContract = (address: string) => {\n  return new Contract(address, SmartWalletFactoryABI)\n}\n\n/**\n * This is a Smart Wallet Factory contract helper for a given Wallet\n */\nexport class SmartWalletFactory implements ISmartWalletFactory {\n  smartAddress: string\n  smartWalletFactoryContract: Contract\n\n  private constructor (smartAddress: string, smartWalletFactoryContract: Contract) {\n    this.smartAddress = smartAddress\n    this.smartWalletFactoryContract = smartWalletFactoryContract\n  }\n\n  private static getSmartWalletParams (address: string) {\n    return [\n      address,\n      constants.AddressZero,\n      constants.Zero\n    ]\n  }\n\n  static async create (signer: Signer, smartWalletFactoryContractAddress: string) {\n    const smartWalletFactoryContract = createSmartWalletFactoryContract(smartWalletFactoryContractAddress).connect(signer)\n    const address = await signer.getAddress()\n    const smartWalletAddress = await smartWalletFactoryContract.getSmartWalletAddress(...SmartWalletFactory.getSmartWalletParams(address))\n    return new SmartWalletFactory(smartWalletAddress, smartWalletFactoryContract)\n  }\n\n  // deployment\n  getSmartWalletAddress = (): Promise<string> => Promise.resolve(this.smartAddress)\n\n  isDeployed = (): Promise<boolean> => this.smartWalletFactoryContract.signer.provider!.getCode(this.smartAddress).then(code => code !== '0x')\n\n  deploy = (): Promise<ContractTransaction> => this.smartWalletFactoryContract.selfCreateUserSmartWallet(\n    constants.AddressZero,\n    constants.Zero\n  )\n}\n","import { ethers } from 'ethers'\nimport React, { useState, useEffect } from 'react'\nimport { SmartWalletFactory } from '../lib/SmartWalletFactory'\nimport erc20Abi from '../abi/erc20Abi.json'\n\ninterface Interface {\n  ethersProvider: any\n}\n\nconst smartWalletFactoryAddress = '0xA2276921Af8c20865cC0980A7e6EE8B9C46BDdC0'.toLowerCase()\nconst tokenAddress = '0x726ecc75d5d51356aa4d0a5b648790cc345985ed'\n\nconst SmartWallet: React.FC<Interface> = ({\n  ethersProvider\n}) => {\n  const [smartWallet, setSmartWallet] = useState<any>(null)\n  const [isDeployed, setIsDeployed] = useState<boolean>(false)\n  const [tokenBalance, setTokenBalance] = useState<number | undefined>()\n\n  useEffect(() => {\n    SmartWalletFactory.create(\n      ethersProvider.getSigner(),\n      smartWalletFactoryAddress\n    ).then((factory: SmartWalletFactory) => {\n      setSmartWallet(factory)\n      checkIfDeployed(factory)\n    })\n  }, [ethersProvider])\n\n  const checkIfDeployed = (wallet: SmartWalletFactory) =>\n    wallet.isDeployed()\n      .then((response: boolean) => setIsDeployed(response))\n\n  const deploy = () =>\n    smartWallet.deploy()\n      .then((deployResult: any) => console.log('isDeployed??', deployResult))\n\n  const refreshBalance = () => {\n    const token = new ethers.Contract(\n      tokenAddress,\n      erc20Abi,\n      ethersProvider\n    )\n\n    token.balanceOf(smartWallet.smartAddress.toLowerCase()).then((balance: any) =>\n      setTokenBalance(balance.toString()))\n  }\n\n  return (\n    <div>\n      <h2>Smart Wallet Account</h2>\n      {smartWallet && <p><strong>Smart Wallet Address:</strong> {smartWallet.smartAddress}</p>}\n      <p><strong>Is deployed:</strong>\n        {isDeployed.toString()}\n        <button onClick={deploy} disabled={isDeployed}>deploy</button>\n      </p>\n      <p><strong>TKN Balance:</strong> {tokenBalance}\n        <button\n          disabled={!smartWallet}\n          onClick={refreshBalance}>refresh</button>\n      </p>\n      <hr />\n    </div>\n  )\n}\n\nexport default SmartWallet\n","import axios, { AxiosResponse } from 'axios'\nimport React, { useState } from 'react'\nimport { HubDetails } from './RelayTransaction'\n\ninterface Interface {\n  setHubDetails: (details: any) => void\n}\n\nconst relayHubAddress = 'http://localhost:8090'\n\nconst RelayHub: React.FC<Interface> = ({ setHubDetails }) => {\n  const [error, setError] = useState<string | undefined>()\n\n  const getHubInfo = () => {\n    setError(undefined)\n    axios.get(`${relayHubAddress}/getAddr`)\n      .then((resp: AxiosResponse) => resp.data)\n      .then((data: HubDetails) => setHubDetails(data))\n      .catch((err: Error) => setError(err.toString()))\n  }\n\n  return (\n    <div>\n      <h2>Relay Hub Info</h2>\n      <p><strong>URL</strong> {relayHubAddress}</p>\n      <button onClick={getHubInfo}>get details from hub</button>\n      {error && <p><strong>{error}</strong></p>}\n      <hr />\n    </div>\n  )\n}\n\nexport default RelayHub\n","import React from 'react'\n\nexport interface HubDetails {\n  'relayWorkerAddress': string,\n  'relayManagerAddress': string,\n  'relayHubAddress': string,\n  'minGasPrice': string,\n  'chainId': string,\n  'networkId': string,\n  'ready': boolean,\n  'version': string\n}\n\ninterface Interface {\n  hubDetails: HubDetails\n}\n\nconst RelayTransaction: React.FC<Interface> = ({ hubDetails }) => {\n  return (\n    <div>\n      <h2>Relay Transaction</h2>\n      <h3>details</h3>\n      <pre style={{ width: '90%', textAlign: 'left' }}>\n        {JSON.stringify(hubDetails, null, 2)}\n      </pre>\n    </div>\n  )\n}\n\nexport default RelayTransaction\n","import React, { useState } from 'react'\n\nimport { ethers } from 'ethers'\n\nimport './App.scss'\nimport ProviderConnect from './components/ProviderConnect'\nimport EoaAccount from './components/EoaAccount'\nimport SmartWallet from './components/SmartWallet'\nimport RelayHub from './components/RelayHub'\nimport RelayTransaction, { HubDetails } from './components/RelayTransaction'\n\nfunction App () {\n  // Global State:\n  const [ethersProvider, setEthersProvider] = useState<any | null>(null)\n  const [rLoginResponse, setRloginResponse] = useState<any>()\n  const [relayHubInfo, setRelayHubInfo] = useState<HubDetails | null>(null)\n\n  const handleLogin = (rLoginresponse: any) => {\n    setRloginResponse(rLoginresponse)\n    const provider = new ethers.providers.Web3Provider(rLoginresponse.provider)\n    setEthersProvider(provider)\n  }\n\n  return (\n    <div className=\"App\">\n      {!rLoginResponse && <ProviderConnect setProvider={handleLogin} />}\n      {rLoginResponse && (\n        <div>\n          <EoaAccount provider={rLoginResponse.provider} />\n        </div>\n      )}\n      {ethersProvider && <SmartWallet ethersProvider={ethersProvider} />}\n      <RelayHub setHubDetails={(details: HubDetails) => setRelayHubInfo(details)} />\n      {rLoginResponse && relayHubInfo &&\n        <RelayTransaction hubDetails={relayHubInfo} />\n      }\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}